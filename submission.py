# -*- coding: utf-8 -*-
"""SUBMISSION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H8VGByBArvjs-eCEbOFjvkU-k-_eRoMj

NAMA: KIA DZAKY ERIYOKO
USERNAME : kia_dzaky_dV2k
EMAIL: kkhiahebat@gmail.com
"""

!wget https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip

!unzip "/content/rockpaperscissors.zip" -d "/content/"

"""MEMANGGIL DATA"""

import os
folder_gunting = os.path.join('/content/rockpaperscissors/scissors')
folder_batu = os.path.join('/content/rockpaperscissors/rock')
folder_kertas = os.path.join('/content/rockpaperscissors/paper')


print("Jumlah gunting: ", len(os.listdir(folder_gunting)))
print("Jumlah batu: ", len(os.listdir(folder_batu)))
print("Jumlah kertas: ", len(os.listdir(folder_kertas)))
print("")
print("MENAMPILKAN 5 TERATAS")
print("menampilkan gunting: ", os.listdir(folder_gunting)[:5])
print("menampilkan batu: ", os.listdir(folder_batu)[:5])
print("menampilkan kertas: ", os.listdir(folder_kertas)[:5])

"""# New Section

MENAMPILKAN GAMBAR KERTAS
"""

from IPython.display import Image, display

data_kertas = os.listdir(folder_kertas)
for i in range(0,4):
  folder_data_kertas = folder_kertas + '/' + data_kertas[i]
  display(Image(folder_data_kertas, width=100, height=100))

"""MENAMPILKAN GAMBAR GUNTING"""

from IPython.display import Image, display

data_gunting = os.listdir(folder_gunting)
for i in range(0,4):
  folder_data_gunting = folder_gunting + '/' + data_gunting[i]
  display(Image(folder_data_gunting, width=100, height=100))

"""MENAMPILKAN GAMBAR BATU"""

from IPython.display import Image, display

data_batu = os.listdir(folder_batu)
for i in range(0,4):
  folder_data_batu = folder_batu + '/' + data_batu[i]
  display(Image(folder_data_batu, width=100, height=100))

"""IMPOR MODUL TENSORFLOW
IMPOR MODUL KERAS
IMPOR MODUL KERASPREPROCESSING
IMPOR MODUL IMAGE GENERATOR
"""

import tensorflow as tf                                                           
import keras_preprocessing                                                        
from keras_preprocessing import image                                             
from keras_preprocessing.image import ImageDataGenerator

basis_dir = "/content/rockpaperscissors/rps-cv-images/"                                          
training_datagen = ImageDataGenerator(                                                           
      rescale = 1./255,                                                                          
#AUGMENTASI
	    # rotation_range=40,                                                                         
      # width_shift_range=0.2,                                                                     
      # height_shift_range=0.2,                                                                    
      shear_range=0.2,                                                                           
      zoom_range=0.2,                                                                            
      horizontal_flip=True,                                                                      
      # fill_mode='nearest',                                                                       
#MEMECAH DATA 
      validation_split=0.4                                                                       
      )

"""GENERATE DATA TRAINING DAN DATA VALIDASI"""

train_generator = training_datagen.flow_from_directory(
    basis_dir,
    target_size  = (100,150),
    batch_size = 32,
    shuffle = True,
    subset = 'training',
    color_mode = 'rgb',
    class_mode = 'categorical'
)

validation_generator = training_datagen.flow_from_directory(
    basis_dir,
    batch_size = 32,
    target_size  = (100,150),
    subset = 'validation',
    color_mode = 'rgb',
    class_mode = 'categorical'
)

"""MODEL SEQUENTIAL"""

model = tf.keras.models.Sequential(
    [
      tf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(100, 150, 3)), 
      tf.keras.layers.MaxPooling2D(2, 2),
      
      tf.keras.layers.Conv2D(32, (3,3), activation='relu'),                         
      tf.keras.layers.MaxPooling2D(2,2), 
      
      tf.keras.layers.Conv2D(32, (3,3), activation='relu'),                         
      tf.keras.layers.MaxPooling2D(2,2),
      
      tf.keras.layers.Flatten(),                                                    
      tf.keras.layers.Dropout(0.5),
      
      tf.keras.layers.Dense(128, activation='relu'),                                
      
      tf.keras.layers.Dense(512, activation='relu'),                                
      
      tf.keras.layers.Dense(3, activation='softmax')       
    ]
)
model.summary()

model.compile(
    loss = 'categorical_crossentropy',
    optimizer = tf.optimizers.Adam(),
    metrics = ['accuracy']
)

chart = model.fit(
    train_generator,
    steps_per_epoch = 25,
    epochs = 20,
    validation_data = validation_generator,
    validation_steps = 5,
    verbose = 1
)

import matplotlib.pyplot as matplt                                                  
acc = chart.history['accuracy']                                                 
val_acc = chart.history['val_accuracy']                                       

epochs = range(len(acc))                                                          

matplt.plot(epochs, acc, 'r', label='TRAINING ACCURACY ')                             
matplt.plot(epochs, val_acc, 'b', label='VALIDATION ACCURAY')    
matplt.title('VALIDATION AND TRAINING ACCURACY')   
matplt.ylabel('accuracy')  
matplt.xlabel('epoch')                                       
matplt.legend(loc=0)                                                                 
matplt.figure()                                                                      
matplt.show()

loss = chart.history['loss']                                                    
val_loss = chart.history['val_loss']                                            
   
matplt.plot(epochs, loss, 'g', label = 'Loss')
matplt.plot(epochs, val_loss, 'black', label = 'Val Loss')
matplt.title('LOSS AND VAL LOSS')                                        
matplt.legend(loc=0)         
matplt.ylabel('loss')  
matplt.xlabel('epoch')                                                          
matplt.figure()                                                                      
matplt.show()

import numpy as np                                                                
from google.colab import files                                                    
from keras.preprocessing import image

"""UPLOAD FILE"""

uploaded = files.upload()
pred_indices = train_generator.class_indices
for file_number in uploaded.keys():
  path = file_number
  img = image.load_img(path, target_size = (100, 150))
  imgplot = matplt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)

  images = np.vstack([x])
  classes = model.predict(images, batch_size = 10)

  print(classes)
  
  if classes[0][0] == 1:
    print("INI GAMBAR KERTAS")
  elif classes[0][1] == 1:
    print("INI GAMBAR BATU")
  elif classes[0][2] == 1:
    print("INI GAMBAR GUNTING")
  else:
    print("TIDAK DIKETAHUI")